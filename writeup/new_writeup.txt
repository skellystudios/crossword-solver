MAIN BODY WRITEUP STRUCTURE
(see google doc for better version)

Introduction to the problem / field

Literature review
	analysis of clue types
	parsing frameworks
	conventions

A benchmarking suite to check performance + accuracy
	Clues from real newspapers
	A solution markup and automated verification => is answer enough or do we just want to provide a method
	Rating clues on a scale / on multiple scales

Data considerations
	Corpus / wordlist
			Loading in an unsafe IO manner
			Conjugated forms -> we should match tense, plurality etc.
	Expanding out keywords (e.g. Anagram indicators)
	Knowledge -> capital of Paris
		Derived knowledge -> Qulog to create knowlegebase?
	Unsupervised learned?

Naive Approach - Parsing and Evaluating everything
	Discussion of different clue types
		Any interesting ones of note
	State space and performance concerns
		By length of clue
		Show difference from particularly complex or overloaded operators

Algebraic + computational simplifications
 	Pruning out equivalent trees (Canonicalization)
	Discussion of lazy evaluation
		e.g. Anagram Nodes - should we pre-compute and thread through the program?

Further heuristic simplification - matching the Human Solver's thought process
	Constrain length while parsing
		maximum and minimum
	Constrain length while solving
	Constain against known letters
	Constrain against known wordlist
	Constrain against synonyms
	Analysis of improved solution with respect to state space etc.

Solving based on most probable parse trees
	Evaluation functions
		Current weighting just ‘works’
		Could generate weighting based on ML + cost minimization
	Providing a weighted list of possible answers

Analysis of Single clue solving against benchmarks
	Accuracy given data
	Accuracy assuming reasonable data could be acquired
	Computation required and feasibility in the real world
	Discussion of parallelization
		And analysis of what I should eventually do - maybe some fun for August?   

Whole grid solving
	By permutations of all possible parses (dull but effective?)
	Lazy evaluation (massive branching issues?)
	Repeated function application (probabilistic convergence)
	probabilistically constrain against likely evidence from other clue
		Convergence not guaranteed!

Discussion of possibility of solving with missing information
	Human as an oracle
	Generating probable solutions with missing data “if Lear means/is a King...”

Deployment as a web app